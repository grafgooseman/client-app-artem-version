{"version":3,"sources":["components/Metamask.js","oc.png","images/Success.svg","images/Fail.svg","App.js","reportWebVitals.js","index.js"],"names":["Metamask","props","state","this","connectToMetamask","provider","ethers","providers","AlchemyProvider","signer","Wallet","hashContract","Contract","ERC20_ABI","hasValue","result","localStorage","setItem","console","log","renderMetamask","Component","configureChains","chain","localhost","rinkeby","ropsten","alchemyProvider","apiKey","publicProvider","chains","connectors","getDefaultWallets","appName","wagmiClient","createClient","autoConnect","App","useEffect","SHA256","fileToHash","toString","enc","Hex","setTimeout","document","getElementById","style","display","client","className","id","Image","src","successSvg","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"siCAMMA,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAEDC,MAAQ,CAAC,EAHI,CAKlB,C,qDAED,WACCC,KAAKC,mBACL,G,gFAED,2GACOC,EAAW,IAAIC,IAAOC,UAAUC,gBAAgB,UAAW,oCAC9C,mEACbC,EAAS,IAAIC,SADA,mEACmBL,GAChCM,EAAe,IAAIL,IAAOM,SAAS,6CAA8CC,EAAWJ,GAJnG,SAMoBE,EAAaG,SAAS,oEAN1C,OAMKC,EANL,OAOCC,aAAaC,QAAQ,SAAUF,GAC/BG,QAAQC,IAAIJ,GARb,2C,kFAWA,WAYC,G,oBAED,WACC,OACC,8BACEZ,KAAKiB,kBAGR,K,GA3CqBC,aA8CRrB,I,kBCpDA,G,OAAA,IAA0B,gCCA1B,MAA0B,oC,GCA1B,I,QCyBf,G,YAA6BsB,YACzB,CAACC,IAAMC,UAAWD,IAAME,QAASF,IAAMG,SACvC,CACIC,YAAgB,CAAEC,OAAQ,qCAC1BC,iBAJAC,EAAR,EAAQA,OAAQzB,EAAhB,EAAgBA,SAQR0B,EAAeC,YAAkB,CACrCC,QAAS,oBACTH,WAFIC,WAKFG,EAAcC,YAAa,CAC7BC,aAAa,EACbL,aACA1B,aA6FWgC,MAvEf,WAcI,OAbAC,qBAAU,WACNpB,QAAQC,IAAI,UAdhBD,QAAQC,IAAIoB,iBAAOC,EAAWC,YAAYA,SAASC,MAAIC,MAiB1CC,YAAW,WAChB1B,QAAQC,IAAI0B,SAASC,eAAe,YACpC5B,QAAQC,IAAI0B,SAASC,eAAe,YACpCD,SAASC,eAAe,WAAWC,MAAMC,QAAU,OACnDH,SAASC,eAAe,aAAaC,MAAMC,QAAU,OACxD,GAAE,IAEN,GAAE,IAGC,cAAC,IAAD,CAAaC,OAAQf,EAArB,SACI,cAAC,IAAD,CAAoBJ,OAAQA,EAA5B,SACI,qBAAKoB,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,YAAd,4BACA,mBAAGA,UAAU,OAAb,8CACA,oBAAIA,UAAU,SACd,uDAGJ,cAAC,EAAD,IAUA,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,6BAAf,SACI,qBAAKC,GAAG,UAAUD,UAAU,MAA5B,SACI,cAACE,EAAA,EAAD,CAAOC,IAAI,kBAGnB,qBAAKH,UAAU,6BAAf,SACI,sBAAKC,GAAG,YAAYD,UAAU,MAA9B,UACI,cAACE,EAAA,EAAD,CAAOC,IAAKC,IACZ,uBAAK,uBACL,uEASZ,qBAAKH,GAAG,SAASD,UAAU,MAA3B,SACI,wBAAQA,UAAU,qCAAlB,SACI,qBAAKA,UAAU,kBAAf,SACI,mBAAGA,UAAU,YAAYK,KAAK,wBAA9B,oDAUvC,ECxHcC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECJYQ,IAASC,WAAWrB,SAASC,eAAe,SACpDqB,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJZ,G","file":"static/js/main.644c9ebe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport ERC20_ABI from \"./ERC20_ABI.json\";\r\n\r\nimport { ethers, Wallet } from \"ethers\";\r\n\r\nclass Metamask extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.connectToMetamask();\r\n\t}\r\n\r\n\tasync connectToMetamask() {\r\n\t\tconst provider = new ethers.providers.AlchemyProvider(\"rinkeby\", \"jr7geQ17FBFpcrTepaQ1kGaNqsXzE9wL\");\r\n\t\tconst privateKey = \"3288b2fce8563381ff2e07a779a032616a674e4cdc11e9ef408c3e2a77c16449\";\r\n\t\tconst signer = new Wallet(privateKey, provider);\r\n\t\tconst hashContract = new ethers.Contract('0x5E6D299Ef573812cb456BAf45c08f35970BCAA46', ERC20_ABI, signer);\r\n\t\t// console.log(await hashContract.hasValue(\"b7f4239c5495959e23fc1ff80bb95db0d5a14b28ea307e2fd03b3ecf6426b532\"));\r\n\t\tlet result = await hashContract.hasValue(\"b7f4239c5495959e23fc1ff80bb95db0d5a14b28ea307e2fd03b3ecf6426b532\");\r\n\t\tlocalStorage.setItem(\"result\", result);\r\n\t\tconsole.log(result);\r\n\t}\r\n\r\n\trenderMetamask() {\r\n\t\t// if (!this.state.selectedAddress) {\r\n\t\t// \treturn (\r\n\t\t// \t\t<button type=\"button\" className=\"btn btn-primary btn-lg\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={() => this.connectToMetamask()}>Connect to Metamask</button>\r\n\t\t// \t)\r\n\t\t// } else {\r\n\t\t// \treturn (\r\n\t\t// \t\t<div>\r\n\r\n\t\t// \t\t</div>\r\n\t\t// \t);\r\n\t\t// }\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.renderMetamask()}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Metamask;","export default __webpack_public_path__ + \"static/media/oc.648af548.png\";","export default __webpack_public_path__ + \"static/media/Success.a90ce728.svg\";","export default __webpack_public_path__ + \"static/media/Fail.31b1a155.svg\";","import 'bootstrap/dist/css/bootstrap.css';\nimport '@rainbow-me/rainbowkit/dist/index.css';\nimport { getDefaultWallets, RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { chain, configureChains, createClient, WagmiConfig } from \"wagmi\";\nimport { alchemyProvider } from \"wagmi/providers/alchemy\";\nimport { publicProvider } from \"wagmi/providers/public\";\nimport './App.css';\nimport Metamask from './components/Metamask';\nimport './custom.scss';\nimport { SHA256, enc } from 'crypto-js';\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\nimport { createHash } from \"crypto-browserify\";\n// import { fs } from \"file-system\";\nimport fileToHash from \"./oc.png\";\nimport successSvg from \"./images/Success.svg\";\nimport failSvg from \"./images/Fail.svg\";\n\nimport { Container, Image } from 'react-bootstrap';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport React, { useState, useEffect } from 'react';\n\nimport { Contract, providers, Signer } from 'ethers';\n\n\nconst { chains, provider } = configureChains(\n    [chain.localhost, chain.rinkeby, chain.ropsten],\n    [\n        alchemyProvider({ apiKey: \"jr7geQ17FBFpcrTepaQ1kGaNqsXzE9wL\" }),\n        publicProvider()\n    ]\n);\n\nconst { connectors } = getDefaultWallets({\n    appName: 'My RainbowKit App',\n    chains\n});\n\nconst wagmiClient = createClient({\n    autoConnect: true,\n    connectors,\n    provider\n})\n\n\n// window.addEventListener(\"load\", function () {\n\n// });\n\n//Hashing/////////////////////////////////////////////////////////////////\nfunction generateHashFromPath() {\n    console.log(SHA256(fileToHash.toString()).toString(enc.Hex));\n}\n/////////////////////////////////////////////////////////////////////////\n\nfunction viewBlockChainData(){\n    let signer = new Signer(wagmiClient.web3.currentProvider);\n    let contract = new Contract(wagmiClient.contractAddress, wagmiClient.abi, signer);\n\n    console.log(contract);\n}\n\n\nfunction App() {\n    useEffect(() => {\n        console.log('OnLoad');\n        generateHashFromPath();\n    \n        let tt = setTimeout(function () {\n            console.log(document.getElementById('loading'));\n            console.log(document.getElementById('loading'));\n            document.getElementById('loading').style.display = \"none\";\n            document.getElementById('secondary').style.display = \"block\";\n        }, 2000);\n        // clearTimeout(tt);\n    }, []);\n\n    return (\n        <WagmiConfig client={wagmiClient}>\n            <RainbowKitProvider chains={chains}>\n                <div className=\"App\">\n                    <header className=\"App-header\" >\n                        <div className=\"row\">\n                            <div className=\"jumbotron\">\n                                <h1 className=\"display-4\">Hello, lawyer!</h1>\n                                <p className=\"lead\">The DAPP to verify the ownership</p>\n                                <hr className=\"my-4\" />\n                                <p>We make life easier</p>\n                            </div>\n\n                            <Metamask/>\n\n                            {/* <div>\n                                <button onClick={() => {\n                                    generateHashFromPath();\n                                }} type=\"button\" className=\"btn btn-primary btn-lg\" data-toggle=\"modal\" data-target=\"#exampleModal\">\n                                    Generate Hash\n                                </button>\n                            </div> */}\n\n                            <div className=\"container\">\n                                <div className=\"row justify-content-around\">\n                                    <div id=\"loading\" className=\"col\">\n                                        <Image src=\"./807.gif\" />\n                                    </div>\n                                </div>\n                                <div className=\"row justify-content-around\">\n                                    <div id=\"secondary\" className=\"col\">\n                                        <Image src={successSvg} />\n                                        <br/><br/>\n                                        <p>Document validation successful</p>\n                                    </div>\n                                </div>\n                                {/* <div className=\"row justify-content-around\">\n                                    <div className=\"col\">\n                                        <Image src=\"./oc.png\" id=\"secondary\" hidden />\n                                    </div>\n                                </div> */}\n                            </div>\n                            <div id=\"footer\" className=\"row\">\n                                <footer className=\"bg-light text-center text-lg-start\">\n                                    <div className=\"text-center p-3\">\n                                        <a className=\"text-dark\" href=\"https://ethtoronto.ca\">ETHToronto Competition</a>\n                                    </div>\n                                </footer>\n                            </div>\n                        </div>\n                    </header>\n                </div>\n            </RainbowKitProvider>\n        </WagmiConfig>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}